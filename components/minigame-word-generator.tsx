"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Separator } from "@/components/ui/separator"
import { Gamepad2, Shuffle, Copy, Download, ArrowRight } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

// Categories v·ªõi m√¥ t·∫£ ti·∫øng Vi·ªát
const CATEGORIES = {
  provinces: { name: "63 T·ªânh Th√†nh", desc: "T·ªânh th√†nh Vi·ªát Nam", icon: "üèõÔ∏è" },
  landmarks: { name: "ƒê·ªãa Danh", desc: "ƒê·ªãa danh n·ªïi ti·∫øng VN", icon: "üè∞" },
  food: { name: "ƒê·ªì ƒÇn", desc: "M√≥n ƒÉn, th·ª©c u·ªëng VN", icon: "üçú" },
  reduplicated: { name: "T·ª´ L√°y", desc: "T·ª´ l√°y ti·∫øng Vi·ªát", icon: "üîÑ" },
  compound: { name: "T·ª´ Gh√©p", desc: "T·ª´ gh√©p ph·ªï bi·∫øn", icon: "üß©" },
  animals: { name: "ƒê·ªông V·∫≠t", desc: "Con v·∫≠t quen thu·ªôc", icon: "üêï" },
  colors: { name: "M√†u S·∫Øc", desc: "C√°c m√†u c∆° b·∫£n", icon: "üé®" },
  jobs: { name: "Ngh·ªÅ Nghi·ªáp", desc: "C√°c ngh·ªÅ ph·ªï bi·∫øn", icon: "üë®‚Äçüíº" },
  family: { name: "Gia ƒê√¨nh", desc: "Ng∆∞·ªùi th√¢n trong nh√†", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
  school: { name: "Tr∆∞·ªùng H·ªçc", desc: "T·ª´ v·ª±ng h·ªçc t·∫≠p", icon: "üéì" },
  sports: { name: "Th·ªÉ Thao", desc: "C√°c m√¥n th·ªÉ thao", icon: "‚öΩ" },
  nature: { name: "Thi√™n Nhi√™n", desc: "T·ª± nhi√™n, th·ªùi ti·∫øt", icon: "üå≥" },
  transport: { name: "Ph∆∞∆°ng Ti·ªán", desc: "C√°c lo·∫°i xe, t√†u", icon: "üöó" },
  body: { name: "C∆° Th·ªÉ", desc: "B·ªô ph·∫≠n c∆° th·ªÉ", icon: "üë§" },
  emotions: { name: "C·∫£m X√∫c", desc: "T√¨nh c·∫£m, c·∫£m x√∫c", icon: "üòä" },
  weather: { name: "Th·ªùi Ti·∫øt", desc: "Th·ªùi ti·∫øt, kh√≠ h·∫≠u", icon: "üå§Ô∏è" },
  items: { name: "ƒê·ªì D√πng", desc: "V·∫≠t d·ª•ng h√†ng ng√†y", icon: "üìù" },
  all: { name: "T·∫•t C·∫£", desc: "Tr·ªôn t·∫•t c·∫£ ch·ªß ƒë·ªÅ", icon: "üé≤" }
}

interface MinigameWordGeneratorProps {
  onWordsSelected?: (words: string[]) => void
}

export function MinigameWordGenerator({ onWordsSelected }: MinigameWordGeneratorProps) {
  const [selectedCategory, setSelectedCategory] = useState<string>("all")
  const [customPrompt, setCustomPrompt] = useState<string>("")
  const [count, setCount] = useState<number>(50)
  const [difficulty, setDifficulty] = useState<string>("mixed")
  const [words, setWords] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [useCohere, setUseCohere] = useState<boolean>(false)
  const { toast } = useToast()

  const generateWords = async () => {
    setIsLoading(true)
    try {
      if (useCohere && customPrompt.trim()) {
        // S·ª≠ d·ª•ng Cohere API v·ªõi custom prompt
        const response = await fetch('/api/cohere/generate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            prompt: customPrompt,
            max_tokens: 500,
            temperature: 0.8
          })
        })

        const data = await response.json()
        const generatedWords = data.text
          .split('\n')
          .map((word: string) => word.trim())
          .filter((word: string) => word && !word.match(/^\d+\./) && !word.startsWith('-'))
          .slice(0, count)

        setWords(generatedWords)
      } else {
        // S·ª≠ d·ª•ng API c√≥ s·∫µn
        const response = await fetch(`/api/minigame-words?category=${selectedCategory}&count=${count}&difficulty=${difficulty}`)
        const data = await response.json()

        if (data.success) {
          setWords(data.words)
          toast({
            title: "Th√†nh c√¥ng!",
            description: `ƒê√£ t·∫°o ${data.words.length} t·ª´ v·ª±ng`,
          })
        } else {
          throw new Error(data.error)
        }
      }
    } catch (error) {
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫°o t·ª´ v·ª±ng",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const copyWords = async () => {
    const wordsList = words.join('\n')
    await navigator.clipboard.writeText(wordsList)
    toast({
      title: "ƒê√£ copy!",
      description: "ƒê√£ sao ch√©p danh s√°ch t·ª´ v·ª±ng",
    })
  }

  const downloadWords = () => {
    const wordsList = words.join('\n')
    const blob = new Blob([wordsList], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `minigame-words-${selectedCategory}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "ƒê√£ t·∫£i xu·ªëng!",
      description: "File t·ª´ v·ª±ng ƒë√£ ƒë∆∞·ª£c l∆∞u",
    })
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Gamepad2 className="h-5 w-5" />
            T·∫°o T·ª´ V·ª±ng Minigame
          </CardTitle>
          <CardDescription>
            T·∫°o t·ª´ v·ª±ng ti·∫øng Vi·ªát cho c√°c minigame, word puzzle v√† tr√≤ ch∆°i t·ª´ v·ª±ng
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Category Selection */}
          <div className="space-y-4">
            <Label className="text-base font-semibold">Ch·ªçn Ch·ªß ƒê·ªÅ Nhanh:</Label>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
              {Object.entries(CATEGORIES).map(([key, category]) => (
                <Button
                  key={key}
                  variant={selectedCategory === key ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(key)}
                  className="justify-start text-left h-auto p-3"
                >
                  <span className="mr-2">{category.icon}</span>
                  <div>
                    <div className="font-medium text-xs">{category.name}</div>
                    <div className="text-xs opacity-70">{category.desc}</div>
                  </div>
                </Button>
              ))}
            </div>
          </div>

          <Separator />

          {/* Settings */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="count">S·ªë l∆∞·ª£ng t·ª´</Label>
              <Input
                id="count"
                type="number"
                min="1"
                max="100"
                value={count}
                onChange={(e) => setCount(parseInt(e.target.value) || 50)}
              />
            </div>

            <div className="space-y-2">
              <Label>ƒê·ªô kh√≥</Label>
              <Select value={difficulty} onValueChange={setDifficulty}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="easy">D·ªÖ (‚â§6 k√Ω t·ª±)</SelectItem>
                  <SelectItem value="medium">Trung b√¨nh (7-10 k√Ω t·ª±)</SelectItem>
                  <SelectItem value="hard">Kh√≥ (>10 k√Ω t·ª±)</SelectItem>
                  <SelectItem value="mixed">H·ªón h·ª£p</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Ph∆∞∆°ng th·ª©c</Label>
              <Select value={useCohere ? "cohere" : "preset"} onValueChange={(value) => setUseCohere(value === "cohere")}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="preset">T·ª´ c√≥ s·∫µn</SelectItem>
                  <SelectItem value="cohere">AI Cohere</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Custom Prompt for Cohere */}
          {useCohere && (
            <div className="space-y-2">
              <Label htmlFor="prompt">Prompt t√πy ch·ªânh (cho AI):</Label>
              <Textarea
                id="prompt"
                placeholder="V√≠ d·ª•: T·∫°o 50 t·ª´ v·ª±ng v·ªÅ ƒë·ªông v·∫≠t hoang d√£ ·ªü Vi·ªát Nam..."
                value={customPrompt}
                onChange={(e) => setCustomPrompt(e.target.value)}
                rows={3}
              />
            </div>
          )}

          {/* Generate Button */}
          <Button
            onClick={generateWords}
            disabled={isLoading || (useCohere && !customPrompt.trim())}
            className="w-full"
            size="lg"
          >
            <Shuffle className="mr-2 h-4 w-4" />
            {isLoading ? "ƒêang t·∫°o..." : "T·∫°o T·ª´ V·ª±ng"}
          </Button>
        </CardContent>
      </Card>

      {/* Results */}
      {words.length > 0 && (
        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <div>
              <CardTitle>K·∫øt Qu·∫£ ({words.length} t·ª´)</CardTitle>
              <CardDescription>
                Ch·ªß ƒë·ªÅ: {CATEGORIES[selectedCategory as keyof typeof CATEGORIES]?.name} |
                ƒê·ªô kh√≥: {difficulty === "mixed" ? "H·ªón h·ª£p" : difficulty === "easy" ? "D·ªÖ" : difficulty === "medium" ? "Trung b√¨nh" : "Kh√≥"}
              </CardDescription>
            </div>
            <div className="flex gap-2 flex-wrap">
              {onWordsSelected && (
                <Button
                  size="sm"
                  onClick={() => onWordsSelected(words)}
                  className="bg-gradient-to-r from-purple-500 to-orange-500 hover:from-purple-600 hover:to-orange-600"
                >
                  <ArrowRight className="h-4 w-4 mr-1" />
                  T·∫°o H√¨nh ·∫¢nh
                </Button>
              )}
              <Button variant="outline" size="sm" onClick={copyWords}>
                <Copy className="h-4 w-4 mr-1" />
                Copy
              </Button>
              <Button variant="outline" size="sm" onClick={downloadWords}>
                <Download className="h-4 w-4 mr-1" />
                T·∫£i xu·ªëng
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
              {words.map((word, index) => (
                <Badge key={index} variant="secondary" className="text-center justify-center py-2">
                  {word}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}